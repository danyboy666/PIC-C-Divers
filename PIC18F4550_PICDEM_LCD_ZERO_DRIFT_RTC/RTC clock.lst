CCS PCH C Compiler, Version 4.104, 5967               13-juin-11 13:57

               Filename: C:\Users\db666\Desktop\PIC18F4550_PICDEM_LCD_ZERO_DRIFT_RTC\RTC clock.lst

               ROM used: 3320 bytes (10%)
                         Largest free fragment is 27396
               RAM used: 42 (2%) at main() level
                         74 (4%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0800:  GOTO   1380
*
0808:  MOVWF  04
080A:  MOVFF  FD8,05
080E:  MOVFF  FE0,06
0812:  MOVLB  0
0814:  MOVFF  FE9,0C
0818:  MOVFF  FEA,07
081C:  MOVFF  FE1,08
0820:  MOVFF  FE2,09
0824:  MOVFF  FD9,0A
0828:  MOVFF  FDA,0B
082C:  MOVFF  FF3,12
0830:  MOVFF  FF4,13
0834:  MOVFF  FFA,14
0838:  MOVFF  00,0E
083C:  MOVFF  01,0F
0840:  MOVFF  02,10
0844:  MOVFF  03,11
0848:  BTFSS  F9D.0
084A:  GOTO   0854
084E:  BTFSC  F9E.0
0850:  GOTO   08B4
0854:  MOVFF  0E,00
0858:  MOVFF  0F,01
085C:  MOVFF  10,02
0860:  MOVFF  11,03
0864:  MOVFF  0C,FE9
0868:  MOVFF  07,FEA
086C:  BSF    07.7
086E:  MOVFF  08,FE1
0872:  MOVFF  09,FE2
0876:  MOVFF  0A,FD9
087A:  MOVFF  0B,FDA
087E:  MOVFF  12,FF3
0882:  MOVFF  13,FF4
0886:  MOVFF  14,FFA
088A:  MOVF   04,W
088C:  MOVFF  06,FE0
0890:  MOVFF  05,FD8
0894:  RETFIE 0
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Programme d'horloge programmé avec un microncrolleur 18F4550.              // 
.................... // Ce programme est de base et permet de faire afficher l'heure dans le       // 
.................... // Format hh/mm/ss sur un afficheur LCD standard 2x20.                        // 
.................... //                                                                            // 
.................... // Copyright Dany Ferron                                    11/05/31          // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //Incure la bibliothèque du microcontrolleur 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //Fuses 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NODEBUG,NOBROWNOUT,USBDIV,CPUDIV1,VREGEN,PUT,NOMCLR,NOLVP 
.................... #use delay(clock=48000000) 
*
09A2:  CLRF   FEA
09A4:  MOVLW  3C
09A6:  MOVWF  FE9
09A8:  MOVF   FEF,W
09AA:  BZ    09C8
09AC:  MOVLW  0F
09AE:  MOVWF  01
09B0:  CLRF   00
09B2:  DECFSZ 00,F
09B4:  BRA    09B2
09B6:  DECFSZ 01,F
09B8:  BRA    09B0
09BA:  MOVLW  8F
09BC:  MOVWF  00
09BE:  DECFSZ 00,F
09C0:  BRA    09BE
09C2:  NOP   
09C4:  DECFSZ FEF,F
09C6:  BRA    09AC
09C8:  RETLW  00
*
0B5C:  MOVLW  01
0B5E:  SUBWF  3A,F
0B60:  BNC   0B7A
0B62:  CLRF   FEA
0B64:  MOVLW  3A
0B66:  MOVWF  FE9
0B68:  MOVF   FEF,W
0B6A:  BZ    0B7A
0B6C:  MOVLW  02
0B6E:  MOVWF  00
0B70:  DECFSZ 00,F
0B72:  BRA    0B70
0B74:  BRA    0B76
0B76:  DECFSZ FEF,F
0B78:  BRA    0B6C
0B7A:  RETLW  00
.................... ////////////////////////////////Bootloader USB////////////////////////////////// 
.................... #build(reset=0x800, interrupt=0x808)  
.................... #org 0, 0x7ff { } 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //Constantes définies pour les broches utilisés par l'écran LCD 
.................... #define LCD_TYPE 2   
.................... #define LCD_ENABLE_PIN  PIN_E2 
.................... #define LCD_RW_PIN      PIN_E1 
.................... #define LCD_RS_PIN      PIN_E0 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
.................... //Pilote d'affichage LCD. 
.................... #include <lcd.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0A62:  BSF    F95.4
....................    output_float(LCD_DATA5); 
0A64:  BSF    F95.5
....................    output_float(LCD_DATA6); 
0A66:  BSF    F95.6
....................    output_float(LCD_DATA7); 
0A68:  BSF    F95.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0A6A:  BSF    F8D.1
0A6C:  BCF    F96.1
....................    delay_cycles(1); 
0A6E:  NOP   
....................    lcd_output_enable(1); 
0A70:  BSF    F8D.2
0A72:  BCF    F96.2
....................    delay_cycles(1); 
0A74:  NOP   
....................    high = lcd_read_nibble(); 
0A76:  RCALL  0A10
0A78:  MOVFF  01,43
....................        
....................    lcd_output_enable(0); 
0A7C:  BCF    F8D.2
0A7E:  BCF    F96.2
....................    delay_cycles(1); 
0A80:  NOP   
....................    lcd_output_enable(1); 
0A82:  BSF    F8D.2
0A84:  BCF    F96.2
....................    delay_us(1); 
0A86:  MOVLW  03
0A88:  MOVWF  00
0A8A:  DECFSZ 00,F
0A8C:  BRA    0A8A
0A8E:  BRA    0A90
....................    low = lcd_read_nibble(); 
0A90:  RCALL  0A10
0A92:  MOVFF  01,42
....................        
....................    lcd_output_enable(0); 
0A96:  BCF    F8D.2
0A98:  BCF    F96.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0A9A:  BCF    F95.4
....................    output_drive(LCD_DATA5); 
0A9C:  BCF    F95.5
....................    output_drive(LCD_DATA6); 
0A9E:  BCF    F95.6
....................    output_drive(LCD_DATA7); 
0AA0:  BCF    F95.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0AA2:  SWAPF  43,W
0AA4:  MOVWF  00
0AA6:  MOVLW  F0
0AA8:  ANDWF  00,F
0AAA:  MOVF   00,W
0AAC:  IORWF  42,W
0AAE:  MOVWF  01
.................... } 
0AB0:  GOTO   0ABA (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0A10:  CLRF   44
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0A12:  BSF    F95.4
0A14:  MOVLW  00
0A16:  BTFSC  F83.4
0A18:  MOVLW  01
0A1A:  IORWF  44,F
....................    n |= input(LCD_DATA5) << 1; 
0A1C:  BSF    F95.5
0A1E:  MOVLW  00
0A20:  BTFSC  F83.5
0A22:  MOVLW  01
0A24:  MOVWF  00
0A26:  BCF    FD8.0
0A28:  RLCF   00,F
0A2A:  MOVF   00,W
0A2C:  IORWF  44,F
....................    n |= input(LCD_DATA6) << 2; 
0A2E:  BSF    F95.6
0A30:  MOVLW  00
0A32:  BTFSC  F83.6
0A34:  MOVLW  01
0A36:  MOVWF  00
0A38:  RLCF   00,F
0A3A:  RLCF   00,F
0A3C:  MOVLW  FC
0A3E:  ANDWF  00,F
0A40:  MOVF   00,W
0A42:  IORWF  44,F
....................    n |= input(LCD_DATA7) << 3; 
0A44:  BSF    F95.7
0A46:  MOVLW  00
0A48:  BTFSC  F83.7
0A4A:  MOVLW  01
0A4C:  MOVWF  00
0A4E:  RLCF   00,F
0A50:  RLCF   00,F
0A52:  RLCF   00,F
0A54:  MOVLW  F8
0A56:  ANDWF  00,F
0A58:  MOVF   00,W
0A5A:  IORWF  44,F
....................     
....................    return(n); 
0A5C:  MOVFF  44,01
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
0A60:  RETLW  00
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
09CA:  BTFSC  43.0
09CC:  BRA    09D2
09CE:  BCF    F8C.4
09D0:  BRA    09D4
09D2:  BSF    F8C.4
09D4:  BCF    F95.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
09D6:  BTFSC  43.1
09D8:  BRA    09DE
09DA:  BCF    F8C.5
09DC:  BRA    09E0
09DE:  BSF    F8C.5
09E0:  BCF    F95.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
09E2:  BTFSC  43.2
09E4:  BRA    09EA
09E6:  BCF    F8C.6
09E8:  BRA    09EC
09EA:  BSF    F8C.6
09EC:  BCF    F95.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
09EE:  BTFSC  43.3
09F0:  BRA    09F6
09F2:  BCF    F8C.7
09F4:  BRA    09F8
09F6:  BSF    F8C.7
09F8:  BCF    F95.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
09FA:  NOP   
....................    lcd_output_enable(1); 
09FC:  BSF    F8D.2
09FE:  BCF    F96.2
....................    delay_us(2); 
0A00:  MOVLW  07
0A02:  MOVWF  00
0A04:  DECFSZ 00,F
0A06:  BRA    0A04
0A08:  BRA    0A0A
....................    lcd_output_enable(0); 
0A0A:  BCF    F8D.2
0A0C:  BCF    F96.2
.................... } 
0A0E:  RETLW  00
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0AB4:  BCF    F8D.0
0AB6:  BCF    F96.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0AB8:  BRA    0A62
0ABA:  MOVFF  01,42
0ABE:  BTFSC  01.7
0AC0:  BRA    0AB8
....................    lcd_output_rs(address); 
0AC2:  MOVF   40,F
0AC4:  BNZ   0ACA
0AC6:  BCF    F8D.0
0AC8:  BRA    0ACC
0ACA:  BSF    F8D.0
0ACC:  BCF    F96.0
....................    delay_cycles(1); 
0ACE:  NOP   
....................    lcd_output_rw(0); 
0AD0:  BCF    F8D.1
0AD2:  BCF    F96.1
....................    delay_cycles(1); 
0AD4:  NOP   
....................    lcd_output_enable(0); 
0AD6:  BCF    F8D.2
0AD8:  BCF    F96.2
....................    lcd_send_nibble(n >> 4); 
0ADA:  SWAPF  41,W
0ADC:  MOVWF  42
0ADE:  MOVLW  0F
0AE0:  ANDWF  42,F
0AE2:  MOVFF  42,43
0AE6:  RCALL  09CA
....................    lcd_send_nibble(n & 0xf); 
0AE8:  MOVF   41,W
0AEA:  ANDLW  0F
0AEC:  MOVWF  42
0AEE:  MOVWF  43
0AF0:  RCALL  09CA
.................... } 
0AF2:  RETLW  00
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0AF4:  BCF    F95.4
....................    output_drive(LCD_DATA5); 
0AF6:  BCF    F95.5
....................    output_drive(LCD_DATA6); 
0AF8:  BCF    F95.6
....................    output_drive(LCD_DATA7); 
0AFA:  BCF    F95.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0AFC:  BCF    F96.2
....................    lcd_rs_tris(); 
0AFE:  BCF    F96.0
....................    lcd_rw_tris(); 
0B00:  BCF    F96.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0B02:  BCF    F8D.0
0B04:  BCF    F96.0
....................    lcd_output_rw(0); 
0B06:  BCF    F8D.1
0B08:  BCF    F96.1
....................    lcd_output_enable(0); 
0B0A:  BCF    F8D.2
0B0C:  BCF    F96.2
....................      
....................    delay_ms(15); 
0B0E:  MOVLW  0F
0B10:  MOVWF  3C
0B12:  RCALL  09A2
....................    for(i=1;i<=3;++i) 
0B14:  MOVLW  01
0B16:  MOVWF  2E
0B18:  MOVF   2E,W
0B1A:  SUBLW  03
0B1C:  BNC   0B2E
....................    { 
....................        lcd_send_nibble(3); 
0B1E:  MOVLW  03
0B20:  MOVWF  43
0B22:  RCALL  09CA
....................        delay_ms(5); 
0B24:  MOVLW  05
0B26:  MOVWF  3C
0B28:  RCALL  09A2
....................    } 
0B2A:  INCF   2E,F
0B2C:  BRA    0B18
....................      
....................    lcd_send_nibble(2); 
0B2E:  MOVLW  02
0B30:  MOVWF  43
0B32:  RCALL  09CA
....................    for(i=0;i<=3;++i) 
0B34:  CLRF   2E
0B36:  MOVF   2E,W
0B38:  SUBLW  03
0B3A:  BNC   0B58
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0B3C:  CLRF   03
0B3E:  MOVF   2E,W
0B40:  MOVFF  FF2,2F
0B44:  BCF    FF2.7
0B46:  RCALL  0896
0B48:  BTFSC  2F.7
0B4A:  BSF    FF2.7
0B4C:  MOVWF  2F
0B4E:  CLRF   40
0B50:  MOVWF  41
0B52:  RCALL  0AB4
0B54:  INCF   2E,F
0B56:  BRA    0B36
.................... } 
0B58:  GOTO   13C8 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0F60:  DECFSZ 3D,W
0F62:  BRA    0F66
0F64:  BRA    0F6C
....................       address=LCD_LINE_TWO; 
0F66:  MOVLW  40
0F68:  MOVWF  3E
....................    else 
0F6A:  BRA    0F6E
....................       address=0; 
0F6C:  CLRF   3E
....................       
....................    address+=x-1; 
0F6E:  MOVLW  01
0F70:  SUBWF  3C,W
0F72:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
0F74:  MOVF   3E,W
0F76:  IORLW  80
0F78:  MOVWF  3F
0F7A:  CLRF   40
0F7C:  MOVWF  41
0F7E:  RCALL  0AB4
.................... } 
0F80:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0F82:  MOVF   3B,W
0F84:  XORLW  0C
0F86:  BZ    0F92
0F88:  XORLW  06
0F8A:  BZ    0FA2
0F8C:  XORLW  02
0F8E:  BZ    0FAE
0F90:  BRA    0FB8
....................       case '\f'   :  lcd_send_byte(0,1); 
0F92:  CLRF   40
0F94:  MOVLW  01
0F96:  MOVWF  41
0F98:  RCALL  0AB4
....................                      delay_ms(2); 
0F9A:  MOVLW  02
0F9C:  MOVWF  3C
0F9E:  RCALL  09A2
....................                      break; 
0FA0:  BRA    0FC4
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0FA2:  MOVLW  01
0FA4:  MOVWF  3C
0FA6:  MOVLW  02
0FA8:  MOVWF  3D
0FAA:  RCALL  0F60
0FAC:  BRA    0FC4
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0FAE:  CLRF   40
0FB0:  MOVLW  10
0FB2:  MOVWF  41
0FB4:  RCALL  0AB4
0FB6:  BRA    0FC4
....................       
....................       default     : lcd_send_byte(1,c);     break; 
0FB8:  MOVLW  01
0FBA:  MOVWF  40
0FBC:  MOVFF  3B,41
0FC0:  RCALL  0AB4
0FC2:  BRA    0FC4
....................    } 
.................... } 
0FC4:  RETLW  00
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... #include <DS18B20.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... /*****************************************************************************/ 
.................... /*                                                                           */ 
.................... /* Mini driver pour le capteur de température intelligent Dallas DS18S20     */ 
.................... /*                                                                           */ 
.................... /*                                                                           */ 
.................... /*                                                                           */  
.................... /* Copyright Dany Ferron                                                     */ 
.................... /*****************************************************************************/ 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... /////////////////////////////////Constantes///////////////////////////////////// 
.................... #define PIN_DQ       PIN_C0 
.................... #define THERMOSTAT   PIN_D1 
.................... #define ALARME       PIN_D2 
.................... #define DS_LENGHT 
.................... //////////////////////////declaration des fonctions.//////////////////////////// 
.................... short ds_reset(); 
.................... void ds_write_bit(int1 bit_to_send); 
.................... void ds_write_byte(int8 byte_to_send); 
.................... short ds_read_bit(); 
.................... char ds_read_byte(); 
.................... /////////////////////////////Variable globales.///////////////////////////////// 
.................... int8 receive_bytes[DS_LENGHT]={0,0,0,0,0,0,0,0,0}; 
.................... /////////////////////////////Fonction principale./////////////////////////////// 
.................... float ds1820_read() 
.................... { 
....................    int8 i,temp_var; 
....................    float result; 
....................     
....................    ds_reset(); 
*
0E04:  RCALL  0B7C
....................    ds_write_byte(0xCC); 
0E06:  MOVLW  CC
0E08:  MOVWF  34
0E0A:  RCALL  0BD8
....................    ds_write_byte(0x44); 
0E0C:  MOVLW  44
0E0E:  MOVWF  34
0E10:  RCALL  0BD8
....................    ds_reset(); 
0E12:  RCALL  0B7C
....................    ds_write_byte(0xCC); 
0E14:  MOVLW  CC
0E16:  MOVWF  34
0E18:  RCALL  0BD8
....................    ds_write_byte(0xBE); 
0E1A:  MOVLW  BE
0E1C:  MOVWF  34
0E1E:  RCALL  0BD8
....................     
....................    for(i=0;i<9;i++) 
0E20:  CLRF   2E
0E22:  MOVF   2E,W
0E24:  SUBLW  08
0E26:  BNC   0E4E
....................    { 
....................       receive_bytes[i]=ds_read_byte(); 
0E28:  CLRF   03
0E2A:  MOVF   2E,W
0E2C:  ADDLW  16
0E2E:  MOVWF  01
0E30:  MOVLW  00
0E32:  ADDWFC 03,F
0E34:  MOVFF  01,34
0E38:  MOVFF  03,35
0E3C:  BRA    0C38
0E3E:  MOVFF  35,FEA
0E42:  MOVFF  34,FE9
0E46:  MOVFF  01,FEF
....................    } 
0E4A:  INCF   2E,F
0E4C:  BRA    0E22
....................     
....................    //put in temp all the 8 bits of MSB 
....................    temp_var = receive_bytes[1]; 
0E4E:  MOVFF  17,2F
....................    if (receive_bytes[1] > 0x80) 
0E52:  MOVF   17,W
0E54:  SUBLW  80
0E56:  BC    0E74
....................    { 
....................       temp_var=!temp_var + 1; //twos complement adjustment 
0E58:  MOVF   2F,F
0E5A:  BZ    0E60
0E5C:  MOVLW  00
0E5E:  BRA    0E62
0E60:  MOVLW  01
0E62:  ADDLW  01
0E64:  MOVWF  2F
....................       temp_var=temp_var * -1; //flip value negative. 
0E66:  MOVFF  2F,34
0E6A:  MOVLW  FF
0E6C:  MOVWF  35
0E6E:  BRA    0C6E
0E70:  MOVFF  01,2F
....................    } 
....................    result=((temp_var*256)+(receive_bytes[0])); 
0E74:  CLRF   35
0E76:  MOVFF  2F,34
0E7A:  MOVLW  01
0E7C:  MOVWF  37
0E7E:  CLRF   36
0E80:  BRA    0CBA
0E82:  MOVFF  01,34
0E86:  MOVF   16,W
0E88:  ADDWF  01,W
0E8A:  MOVWF  01
0E8C:  MOVLW  00
0E8E:  ADDWFC 02,W
0E90:  MOVWF  03
0E92:  MOVFF  01,34
0E96:  MOVWF  35
0E98:  BRA    0CDA
0E9A:  MOVFF  03,33
0E9E:  MOVFF  02,32
0EA2:  MOVFF  01,31
0EA6:  MOVFF  00,30
....................    result=result*0.0625; 
0EAA:  MOVFF  33,3E
0EAE:  MOVFF  32,3D
0EB2:  MOVFF  31,3C
0EB6:  MOVFF  30,3B
0EBA:  CLRF   42
0EBC:  CLRF   41
0EBE:  CLRF   40
0EC0:  MOVLW  7B
0EC2:  MOVWF  3F
0EC4:  RCALL  0D12
0EC6:  MOVFF  03,33
0ECA:  MOVFF  02,32
0ECE:  MOVFF  01,31
0ED2:  MOVFF  00,30
....................     
....................    return(result); 
0ED6:  MOVFF  30,00
0EDA:  MOVFF  31,01
0EDE:  MOVFF  32,02
0EE2:  MOVFF  33,03
.................... } 
0EE6:  GOTO   13CA (RETURN)
.................... short ds_reset() 
.................... { 
....................    int8 response; 
....................    output_low(PIN_DQ); 
*
0B7C:  BCF    F94.0
0B7E:  BCF    F8B.0
....................    delay_us(500); 
0B80:  MOVLW  02
0B82:  MOVWF  35
0B84:  MOVLW  FA
0B86:  MOVWF  3A
0B88:  RCALL  0B5C
0B8A:  DECFSZ 35,F
0B8C:  BRA    0B84
....................    output_float(PIN_DQ); 
0B8E:  BSF    F94.0
....................    delay_us(80); 
0B90:  MOVLW  50
0B92:  MOVWF  3A
0B94:  RCALL  0B5C
....................    delay_us(500); 
0B96:  MOVLW  02
0B98:  MOVWF  35
0B9A:  MOVLW  FA
0B9C:  MOVWF  3A
0B9E:  RCALL  0B5C
0BA0:  DECFSZ 35,F
0BA2:  BRA    0B9A
....................    response=input(PIN_DQ); 
0BA4:  BSF    F94.0
0BA6:  CLRF   34
0BA8:  BTFSC  F82.0
0BAA:  INCF   34,F
....................    return(response); 
0BAC:  MOVFF  34,01
.................... } 
0BB0:  RETLW  00
.................... void ds_write_bit(int1 bit_to_send) 
.................... { 
....................    output_low(PIN_DQ); 
0BB2:  BCF    F94.0
0BB4:  BCF    F8B.0
....................    delay_us(2); 
0BB6:  MOVLW  07
0BB8:  MOVWF  00
0BBA:  DECFSZ 00,F
0BBC:  BRA    0BBA
0BBE:  BRA    0BC0
....................    output_bit(PIN_DQ,bit_to_send); 
0BC0:  MOVF   37,F
0BC2:  BNZ   0BC8
0BC4:  BCF    F8B.0
0BC6:  BRA    0BCA
0BC8:  BSF    F8B.0
0BCA:  BCF    F94.0
....................    delay_us(80); 
0BCC:  MOVLW  50
0BCE:  MOVWF  3A
0BD0:  RCALL  0B5C
....................    output_float(PIN_DQ); 
0BD2:  BSF    F94.0
.................... } 
0BD4:  GOTO   0BFC (RETURN)
.................... void ds_write_byte(int8 byte_to_send) 
.................... { 
....................    int8 i; 
....................     
....................    for(i=0;i<8;i++) 
0BD8:  CLRF   35
0BDA:  MOVF   35,W
0BDC:  SUBLW  07
0BDE:  BNC   0C00
....................    { 
....................       ds_write_bit(bit_test(byte_to_send,i)); 
0BE0:  MOVFF  34,00
0BE4:  MOVF   35,W
0BE6:  MOVWF  01
0BE8:  BZ    0BF2
0BEA:  BCF    FD8.0
0BEC:  RRCF   00,F
0BEE:  DECFSZ 01,F
0BF0:  BRA    0BEA
0BF2:  MOVLW  00
0BF4:  BTFSC  00.0
0BF6:  MOVLW  01
0BF8:  MOVWF  37
0BFA:  BRA    0BB2
....................    } 
0BFC:  INCF   35,F
0BFE:  BRA    0BDA
.................... } 
0C00:  RETLW  00
.................... short ds_read_bit() 
.................... { 
0C02:  BCF    39.0
....................    int1 bit_value=0; 
....................     
....................    output_low(PIN_DQ); 
0C04:  BCF    F94.0
0C06:  BCF    F8B.0
....................    delay_us(2); 
0C08:  MOVLW  07
0C0A:  MOVWF  00
0C0C:  DECFSZ 00,F
0C0E:  BRA    0C0C
0C10:  BRA    0C12
....................    output_float(PIN_DQ); 
0C12:  BSF    F94.0
....................    delay_us(5); 
0C14:  MOVLW  13
0C16:  MOVWF  00
0C18:  DECFSZ 00,F
0C1A:  BRA    0C18
0C1C:  BRA    0C1E
....................     
....................    bit_value=input(PIN_DQ); 
0C1E:  BSF    F94.0
0C20:  BCF    39.0
0C22:  BTFSC  F82.0
0C24:  BSF    39.0
....................     
....................    delay_us(120);//Time slot 
0C26:  MOVLW  78
0C28:  MOVWF  3A
0C2A:  RCALL  0B5C
....................     
....................     
....................    return(bit_value); 
0C2C:  MOVLW  00
0C2E:  BTFSC  39.0
0C30:  MOVLW  01
0C32:  MOVWF  01
.................... } 
0C34:  GOTO   0C44 (RETURN)
.................... char ds_read_byte() 
.................... { 
0C38:  CLRF   37
....................    int8 i,byte_value=0,bit_read; 
....................     
....................    for(i=0;i<8;i++) 
0C3A:  CLRF   36
0C3C:  MOVF   36,W
0C3E:  SUBLW  07
0C40:  BNC   0C66
....................    { 
....................       bit_read=ds_read_bit(); 
0C42:  BRA    0C02
0C44:  MOVFF  01,38
....................        
....................       if(bit_read==1)byte_value=byte_value|(0x01<<i); 
0C48:  DECFSZ 38,W
0C4A:  BRA    0C62
0C4C:  MOVLW  01
0C4E:  MOVWF  00
0C50:  MOVF   36,W
0C52:  MOVWF  01
0C54:  BZ    0C5E
0C56:  BCF    FD8.0
0C58:  RLCF   00,F
0C5A:  DECFSZ 01,F
0C5C:  BRA    0C56
0C5E:  MOVF   00,W
0C60:  IORWF  37,F
....................    } 
0C62:  INCF   36,F
0C64:  BRA    0C3C
....................     
....................    return(byte_value); 
0C66:  MOVFF  37,01
.................... } 
0C6A:  GOTO   0E3E (RETURN)
....................  
.................... //RTC variables  
.................... #define XTAL_FREQUENCY  1000  
.................... #define TIMER1_FREQUENCY (XTAL_FREQUENCY/4)// 1 clock tick = 1 instr. cycle = crystal frequency / 4  
.................... int32 Ticker;  
.................... int8 Seconds=0;  
.................... //optional:  
....................  int8 Month=0,Days=0,Hours=12,Minutes=0; 
....................  int16 Year=2011; 
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... // Test whether a given year is a leap year.  
.................... // This optimized version only works for the period 2001 - 2099  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... #define IS_LEAP(year) (year%4 == 0)  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... //    Initialize RTC  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... void Initialize_RTC(void)  
.................... { 
....................    Ticker=TIMER1_FREQUENCY;//initialize clock counter to number of clocks per second 
*
098E:  CLRF   22
0990:  CLRF   21
0992:  CLRF   20
0994:  MOVLW  FA
0996:  MOVWF  1F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);//initialize 16-bit Timer1 to interrupt 
0998:  MOVLW  85
099A:  MOVWF  FCD
....................    //exactly every 65536 clock cycles 
....................    //(about 76 times per second) 
....................    enable_interrupts(int_TIMER1);//Start RTC 
099C:  BSF    F9D.0
.................... } 
099E:  GOTO   13C0 (RETURN)
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... //  -=Process Zero Drift Real Time Clock Information=-  
.................... //  
.................... // Most algorithms configure the timer to generate an interrupt every 100ms, and  
.................... // then count the number of interrupts. The problem in that approach is that most  
.................... // clock frequencies can't be divided by 256 and you don't get an exact 100ms.  
.................... // The small errors will add up to an error of several seconds a day.  
.................... //  
.................... // The algorithm presented here is exact in the long run because it doesn't  
.................... // count the number of interrupts but counts the number of clock cycles.  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... #int_TIMER1                                 
.................... void TIMER1_isr()                           
.................... { 
....................    Ticker-=65536;//Decrement ticker by clocks per interrupt 
*
08B4:  MOVLW  00
08B6:  SUBWF  1F,F
08B8:  SUBWFB 20,F
08BA:  MOVLW  01
08BC:  SUBWFB 21,F
08BE:  MOVLW  00
08C0:  SUBWFB 22,F
....................    if(Ticker<65536)//If second has expired 
08C2:  MOVF   22,F
08C4:  BNZ   08DA
08C6:  MOVF   21,W
08C8:  SUBLW  00
08CA:  BNC   08DA
....................    { 
....................       Ticker+=TIMER1_FREQUENCY;//Increment ticker by clocks per second 
08CC:  MOVLW  FA
08CE:  ADDWF  1F,F
08D0:  MOVLW  00
08D2:  ADDWFC 20,F
08D4:  ADDWFC 21,F
08D6:  ADDWFC 22,F
....................       seconds++;//Increment number of seconds 
08D8:  INCF   23,F
....................    } 
....................     
....................    if(Seconds==60) 
08DA:  MOVF   23,W
08DC:  SUBLW  3C
08DE:  BNZ   0956
....................    { 
....................       Minutes++;Seconds=0; 
08E0:  INCF   27,F
08E2:  CLRF   23
....................       if(Minutes==60) 
08E4:  MOVF   27,W
08E6:  SUBLW  3C
08E8:  BNZ   0956
....................       { 
....................          Hours++;Minutes=0; 
08EA:  INCF   26,F
08EC:  CLRF   27
....................          if(Hours==24) 
08EE:  MOVF   26,W
08F0:  SUBLW  18
08F2:  BNZ   0956
....................          { 
....................             Days++;Hours=0; 
08F4:  INCF   25,F
08F6:  CLRF   26
....................             if((Days==29&&Month==2&&!IS_LEAP(Year)) 
....................             ||(Days==30&&Month==2) 
....................             ||(Days==31&&(Month==4||Month==6||Month==9||Month==11)) 
....................             ||(Days==32)) 
08F8:  MOVF   25,W
08FA:  SUBLW  1D
08FC:  BNZ   0914
08FE:  MOVF   24,W
0900:  SUBLW  02
0902:  BNZ   0914
0904:  MOVF   28,W
0906:  ANDLW  03
0908:  MOVWF  48
090A:  CLRF   49
090C:  MOVF   48,F
090E:  BNZ   0944
0910:  MOVF   49,F
0912:  BNZ   0944
0914:  MOVF   25,W
0916:  SUBLW  1E
0918:  BNZ   0920
091A:  MOVF   24,W
091C:  SUBLW  02
091E:  BZ    0944
0920:  MOVF   25,W
0922:  SUBLW  1F
0924:  BNZ   093E
0926:  MOVF   24,W
0928:  SUBLW  04
092A:  BZ    0944
092C:  MOVF   24,W
092E:  SUBLW  06
0930:  BZ    0944
0932:  MOVF   24,W
0934:  SUBLW  09
0936:  BZ    0944
0938:  MOVF   24,W
093A:  SUBLW  0B
093C:  BZ    0944
093E:  MOVF   25,W
0940:  SUBLW  20
0942:  BNZ   0948
....................             { 
....................                Month++;Days=0; 
0944:  INCF   24,F
0946:  CLRF   25
....................             } 
....................             if(Month==13) 
0948:  MOVF   24,W
094A:  SUBLW  0D
094C:  BNZ   0956
....................             { 
....................                Year++;Month=0; 
094E:  INCF   28,F
0950:  BTFSC  FD8.2
0952:  INCF   29,F
0954:  CLRF   24
....................             } 
....................          } 
....................       } 
....................    } 
....................     
.................... } 
....................       //////////////////////////////////////////////////////////////////////////////// 
....................       //Example program for using the RTC 
....................       //////////////////////////////////////////////////////////////////////////////// 
0956:  BCF    F9E.0
0958:  GOTO   0854
....................       void main() 
....................       { 
*
1380:  CLRF   FF8
1382:  BCF    FD0.7
1384:  BSF    07.7
1386:  CLRF   FEA
1388:  CLRF   FE9
138A:  CLRF   23
138C:  CLRF   24
138E:  CLRF   25
1390:  MOVLW  0C
1392:  MOVWF  26
1394:  CLRF   27
1396:  MOVLW  07
1398:  MOVWF  29
139A:  MOVLW  DB
139C:  MOVWF  28
139E:  MOVF   FC1,W
13A0:  ANDLW  C0
13A2:  IORLW  0F
13A4:  MOVWF  FC1
13A6:  MOVLW  07
13A8:  MOVWF  FB4
13AA:  CLRF   16
13AC:  CLRF   17
13AE:  CLRF   18
13B0:  CLRF   19
13B2:  CLRF   1A
13B4:  CLRF   1B
13B6:  CLRF   1C
13B8:  CLRF   1D
13BA:  CLRF   1E
....................           
....................          Initialize_RTC(); 
13BC:  GOTO   098E
....................          enable_interrupts(GLOBAL); 
13C0:  MOVLW  C0
13C2:  IORWF  FF2,F
....................          lcd_init(); 
13C4:  GOTO   0AF4
....................           
....................          float temperature; 
....................          //loop forever 
....................          while(temperature==ds1820_read()) 
....................          { 
13C8:  BRA    0E04
13CA:  MOVFF  2D,31
13CE:  MOVFF  2C,30
13D2:  MOVFF  2B,2F
13D6:  MOVFF  2A,2E
13DA:  MOVFF  03,35
13DE:  MOVFF  02,34
13E2:  MOVFF  01,33
13E6:  MOVFF  00,32
13EA:  RCALL  0EEA
13EC:  BNZ   1468
....................           
....................             lcd_gotoxy(1,1); 
13EE:  MOVLW  01
13F0:  MOVWF  3C
13F2:  MOVWF  3D
13F4:  RCALL  0F60
....................             printf(lcd_putc,"Time:%2u:%02u:%02u",Hours,Minutes,Seconds); 
13F6:  MOVLW  5C
13F8:  MOVWF  FF6
13FA:  MOVLW  09
13FC:  MOVWF  FF7
13FE:  MOVLW  05
1400:  MOVWF  2E
1402:  RCALL  0FC6
1404:  MOVFF  26,2E
1408:  MOVLW  11
140A:  MOVWF  2F
140C:  RCALL  100C
140E:  MOVLW  3A
1410:  MOVWF  3B
1412:  RCALL  0F82
1414:  MOVFF  27,2E
1418:  MOVLW  01
141A:  MOVWF  2F
141C:  RCALL  100C
141E:  MOVLW  3A
1420:  MOVWF  3B
1422:  RCALL  0F82
1424:  MOVFF  23,2E
1428:  MOVLW  01
142A:  MOVWF  2F
142C:  RCALL  100C
....................              
....................             lcd_gotoxy(1,2); 
142E:  MOVLW  01
1430:  MOVWF  3C
1432:  MOVLW  02
1434:  MOVWF  3D
1436:  RCALL  0F60
....................              
....................              
....................             printf(lcd_putc,"%2u/%2u/%4Lu",Days,Month,Year); 
1438:  MOVFF  25,2E
143C:  MOVLW  11
143E:  MOVWF  2F
1440:  RCALL  100C
1442:  MOVLW  2F
1444:  MOVWF  3B
1446:  RCALL  0F82
1448:  MOVFF  24,2E
144C:  MOVLW  11
144E:  MOVWF  2F
1450:  RCALL  100C
1452:  MOVLW  2F
1454:  MOVWF  3B
1456:  RCALL  0F82
1458:  MOVLW  01
145A:  MOVWF  FE9
145C:  MOVFF  29,2F
1460:  MOVFF  28,2E
1464:  BRA    1072
....................          } 
1466:  BRA    13C8
....................           
....................           
....................          lcd_gotoxy(12,1); 
1468:  MOVLW  0C
146A:  MOVWF  3C
146C:  MOVLW  01
146E:  MOVWF  3D
1470:  RCALL  0F60
....................          printf(lcd_putc,"TEMP:%3.1f ",temperature); //Afficher à l'écran. 
1472:  MOVLW  70
1474:  MOVWF  FF6
1476:  MOVLW  09
1478:  MOVWF  FF7
147A:  MOVLW  05
147C:  MOVWF  2E
147E:  RCALL  0FC6
1480:  MOVLW  02
1482:  MOVWF  FE9
1484:  MOVFF  2D,31
1488:  MOVFF  2C,30
148C:  MOVFF  2B,2F
1490:  MOVFF  2A,2E
1494:  MOVLW  01
1496:  MOVWF  32
1498:  RCALL  11E0
149A:  MOVLW  20
149C:  MOVWF  3B
149E:  RCALL  0F82
....................        
....................       if(temperature<0)printf(lcd_putc,"TEMP:-%3.1f ",temperature); //Afficher à l'écran. 
14A0:  MOVFF  2D,31
14A4:  MOVFF  2C,30
14A8:  MOVFF  2B,2F
14AC:  MOVFF  2A,2E
14B0:  CLRF   35
14B2:  CLRF   34
14B4:  CLRF   33
14B6:  CLRF   32
14B8:  RCALL  0EEA
14BA:  BNC   14EA
14BC:  MOVLW  7C
14BE:  MOVWF  FF6
14C0:  MOVLW  09
14C2:  MOVWF  FF7
14C4:  MOVLW  06
14C6:  MOVWF  2E
14C8:  RCALL  0FC6
14CA:  MOVLW  02
14CC:  MOVWF  FE9
14CE:  MOVFF  2D,31
14D2:  MOVFF  2C,30
14D6:  MOVFF  2B,2F
14DA:  MOVFF  2A,2E
14DE:  MOVLW  01
14E0:  MOVWF  32
14E2:  RCALL  11E0
14E4:  MOVLW  20
14E6:  MOVWF  3B
14E8:  RCALL  0F82
....................        
....................       lcd_putc(223); //Afficher à l'écran le symbole pour les degrés. 
14EA:  MOVLW  DF
14EC:  MOVWF  3B
14EE:  RCALL  0F82
....................       lcd_putc("C "); //Afficher à l'écran le symbole pour les Celcius. 
14F0:  MOVLW  8A
14F2:  MOVWF  FF6
14F4:  MOVLW  09
14F6:  MOVWF  FF7
14F8:  BRA    135E
....................        
....................       } 
....................        
14FA:  SLEEP 

Configuration Fuses:
   Word  1: CE27   IESO FCMEN HSPLL PLL12 CPUDIV1 USBDIV
   Word  2: 1E38   NOBROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
